import tkinter as tk
import customtkinter as ctk
import random

from matplotlib.figure import Figure
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

# Variabel dan Array
Storage_Pauli = []
Storage_Score = []
Score = 0
Count = 1
Flush = 0

class MainApp: 
    def __init__(self, apk):  
        apk.title("Tes Pauli")
        apk.geometry("1000x520")
        apk.configure(bg='lightgrey')
        apk.resizable(True, True)

        self.bg_color = "lightgrey"
        self.font = "BahnSchrift"
        
        # Semua tentang Home
        self.HOME = tk.Frame(apk, bg="#133E87")
        self.HOME.pack(fill="both", expand=True)

        self.label_HOME = ctk.CTkLabel(self.HOME, text="TES PAULI", 
                                       font=(self.font, 60), text_color="white")
        self.label_HOME.pack(pady=40)

        self.Tombol_MulaiTesCepat = ctk.CTkButton(self.HOME, text="Mulai Tes Cepat", 
                                          font=(self.font, 25), 
                                          corner_radius=15, text_color= "black", fg_color="#FF8000", 
                                          border_color="black", border_width=2.6, command=self.show_page2)
        self.Tombol_MulaiTesCepat.pack(pady=10)

        self.Tombol_MulaiTesFull = ctk.CTkButton(self.HOME, text="Mulai Tes Full", 
                                          font=(self.font, 25), corner_radius=15, 
                                          text_color= "black", fg_color="#FF8000", 
                                          border_color="black", border_width=2.6, command=self.show_page3)
        self.Tombol_MulaiTesFull.pack(pady=10)

        self.Tombol_ApaTesPauli = ctk.CTkButton(self.HOME, text="Apa itu Tes Pauli", 
                                                font= (self.font, 25), corner_radius=15, 
                                                text_color = "black", fg_color= "#FF8000",
                                                border_color="black", border_width=2.6, command=self.show_page4)
        self.Tombol_ApaTesPauli.pack(pady=10)

        self.Tombol_LihatHasil = ctk.CTkButton(self.HOME, text="Lihat Hasil", 
                                                font= (self.font, 25), corner_radius=15, 
                                                text_color = "black", fg_color= "#FF8000",
                                                border_color="black", border_width=2.6, command=self.show_page5)
        self.Tombol_LihatHasil.pack(pady=10)

        self.Tombol_Keluar = ctk.CTkButton(self.HOME, text="Keluar", 
                                                font= (self.font, 25), corner_radius=15, 
                                                text_color = "black", fg_color= "#FF8000",
                                                border_color="black", border_width=2.6, command=apk.destroy)
        self.Tombol_Keluar.pack(pady=10)

        self.label_Nama = ctk.CTkLabel(self.HOME, text="by Adriel Christofer Widya", 
                                       font=(self.font, 20), text_color="white" )
        self.label_Nama.pack(side=ctk.LEFT, anchor=ctk.S, padx=15, pady=15)

        # Semua halaman lain
        self.PAGE2 = tk.Frame(apk, bg="#608BC1")
        self.PAGE4 = tk.Frame(apk, bg="#608BC1")
        self.PAGE5 = tk.Frame(apk, bg="#608BC1")

        # PAGE 2 dan 3 (Waktu, Entry, Submit, Kembali, Score, Hasil, Bind)
        self.timer_running = False
        self.label_timer = ctk.CTkLabel(self.PAGE2, text="", font=(self.font, 40), text_color="white")
        self.label_timer.place(x=800, y=40)

        self.label2 = ctk.CTkLabel(self.PAGE2, text="", font=(self.font, 40), text_color="white")
        self.label2.place(x=400, y=40)

        self.label3 = ctk.CTkLabel(self.PAGE2, text="", font=(self.font, 40), text_color="white")
        self.label3.place(x=400, y=80)

        self.entry = ctk.CTkEntry(self.PAGE2, width=250, fg_color="#F3F3E0", 
                                  border_color="black", text_color="black", border_width=2.6)
        self.entry.place(x=350, y=370)

        self.Tombol_submit = ctk.CTkButton(self.PAGE2, text="Submit", font=(self.font, 15), 
                                          corner_radius=15, text_color= "black", fg_color="#F3F3E0", 
                                          border_color="black", border_width=2.6, command=self.Pauli)
        self.Tombol_submit.place(x=610, y=370)

        self.Tombol_kembali = ctk.CTkButton(self.PAGE2, text="Kembali",font=(self.font, 15), 
                                          corner_radius=15, text_color= "black", fg_color="#FF8000", 
                                          border_color="black", border_width=2.6, command=self.show_home)
        self.Tombol_kembali.pack(side=ctk.LEFT, anchor=ctk.S, padx=45, pady=45)

        self.label_score = ctk.CTkLabel(self.PAGE2, text=f"Score {Count}: {Score}", 
                                        font=(self.font, 40), text_color="white")
        self.label_score.place(x=60, y=40)

        self.Hasil = ctk.CTkButton(self.PAGE2, text="Lihat Hasil", font=(self.font, 15), 
                                          corner_radius=15, text_color= "black", fg_color="#FF8000", 
                                          border_color="black", border_width=2.6, command=self.show_page5)

        self.entry.bind("<Return>", lambda event: self.Pauli())

        #PAGE 4 (Judul, Penjelasan, Kembali, Sumber)
        self.Judul = ctk.CTkLabel(self.PAGE4, text="Apa itu Tes Pauli?", 
                                font=(self.font, 40), text_color="white")
        self.Judul.pack(pady=15)

        self.Penjelasan = ctk.CTkLabel(self.PAGE4, width=790, height=300, text="Tes Pauli adalah salah satu jenis tes yang diujikan kepada calon karyawan. Tes ini termasuk jenis psikotes \nyang cukup sederhana, namun membutuhkan ketelitian dan kecepatan. Maka tak heran jika tes ini pun\n bisa menjadi rumit.\n\nCara yang harus diingat untuk mengerjakan Tes Pauli:\n1. Menjumlahkan 2 angka yang tertera pada layar\n2. Jika hasilnya dua digit, cukup tulis angka terakhir saja. Misalnya 9+7=16, berarti kamu cukup tulis angka 6\n3. Kerjakan hingga waktu telah habis\n\nSecara umum, hasil penilaian Tes Pauli akan menjadi seperti ini:\n1. Jika hasil sangat rendah, maka terindikasi gangguan mental.\n2. Jika banyak salah perhitungan, maka terindikasi adanya distraksi mental.\n3. Jika penurunan grafik secara tajam, maka terindikasi hilangnya ingatan saat tes berlangsung.\n 4. Jika grafik diantara puncak tertinggi dan terendah, maka terindikasi gangguan emosional.", 
                                       font=(self.font, 16), text_color="white", 
                                       corner_radius= 30, fg_color="#000B58")
        self.Penjelasan.pack(pady=10)

        self.Tombol_kembali2 = ctk.CTkButton(self.PAGE4, text="Kembali",font=(self.font, 15), 
                                          corner_radius=15, text_color= "black", fg_color="#FF8000", 
                                          border_color="black", border_width=2.6, command=self.show_home)
        self.Tombol_kembali2.pack(side=ctk.LEFT, anchor=ctk.S, padx=45, pady=45)

        self.Sumber = ctk.CTkLabel(self.PAGE4, text="Sumber: https://narasi.tv/read/narasi-daily/tes-pauli-adalah", 
                                font=(self.font, 15), text_color="white")
        self.Sumber.place(x=300, y=445)

        #PAGE 5 (Grafik, Belum ada hasil, Kembali)
        self.grafik = tk.Frame(self.PAGE5)
        self.grafik.place(x=180,y=20)

        self.Belum_ada_hasil = ctk.CTkLabel(self.PAGE5, text="Maaf, Hasil Tes belum dapat dikeluarkan", 
                                font=(self.font, 40), text_color="white")

        self.Tombol_kembali3 = ctk.CTkButton(self.PAGE5, text="Kembali",font=(self.font, 15), 
                                          corner_radius=15, text_color= "black", fg_color="#FF8000", 
                                          border_color="black", border_width=2.6, command=self.show_home)
        self.Tombol_kembali3.pack(side=ctk.LEFT, anchor=ctk.S, padx=45, pady=45)

        # Status Permainan
        self.game_cepat_running = False
        self.game_full_running = False
        self.cepat_selesai = False
        self.full_selesai = False
        self.grafik_status = True

    def show_home(self):
        self.PAGE2.pack_forget()
        self.PAGE4.pack_forget()
        self.PAGE5.pack_forget()
        self.HOME.pack(fill="both", expand=True)
        self.reset_game()

        self.game_cepat_running = False
        self.game_full_running = False

        global Count
        Count = 1

        if not self.grafik_status:
            self.grafik = tk.Frame(self.PAGE5)
            self.grafik.place(x=180,y=20)

    def show_page2(self):
        self.HOME.pack_forget()
        self.PAGE2.pack(fill="both", expand=True)
        Storage_Score.clear()
        self.cepat_selesai = False
        self.full_selesai = False
        self.Hasil.destroy()
        self.start_game_cepat()

    def show_page3(self):
        self.HOME.pack_forget()
        self.PAGE2.pack(fill="both", expand=True)
        Storage_Score.clear()
        self.cepat_selesai = False
        self.full_selesai = False
        self.Hasil.destroy()
        self.start_game_full()

    def show_page4(self):
        self.HOME.pack_forget()
        self.PAGE4.pack(fill="both", expand=True)
    
    def show_page5(self):
        self.HOME.pack_forget()
        self.PAGE2.pack_forget()
        self.PAGE5.pack(fill="both", expand=True)
        self.Show_Grafik()

    def start_game_cepat(self):
        self.game_cepat_running = True
        self.Mulai()
        self.grafik.destroy()
        self.grafik_status = False

        global Score
        global Count
        Score = 0
        self.label_score.configure(text=f"Score {Count}: {Score}")
        
        if 1 <= Count <= 5:
            self.remaining_time = 10

            if not self.timer_running:
                self.timer_running = True
                self.update_timer()
        
            self.generate_numbers()
        else:
            self.timer_running = False
            self.update_timer()

            Score = "--"
            self.label_score.configure(text=f"Score {Count}: {Score}")
            self.Hasil = ctk.CTkButton(self.PAGE2, text="Lihat Hasil", font=(self.font, 15), 
                                          corner_radius=15, text_color= "black", fg_color="#FF8000", 
                                          border_color="black", border_width=2.6, command=self.show_page5)
            self.Hasil.pack(side=ctk.RIGHT, anchor=ctk.S, padx=45, pady=45)

            self.cepat_selesai = True

            self.grafik = tk.Frame(self.PAGE5)
            self.grafik.place(x=180,y=20)

    def start_game_full(self):
        self.game_full_running = True
        self.Mulai()
        self.grafik.destroy()
        self.grafik_status = False

        global Score
        global Count
        Score = 0
        self.label_score.configure(text=f"Score {Count}: {Score}")
        
        if Count == 1:
            self.remaining_time = 22

            if not self.timer_running:
                self.timer_running = True
                self.update_timer()

            self.generate_numbers()
        elif 2 <= Count <= 15:
            self.remaining_time = 20

            if not self.timer_running:
                self.timer_running = True
                self.update_timer()

            self.generate_numbers()
        elif 16 <= Count <= 25:
            self.remaining_time = 18

            if not self.timer_running:
                self.timer_running = True
                self.update_timer()

            self.generate_numbers()
        elif Count == 26:
            self.remaining_time = 20

            if not self.timer_running:
                self.timer_running = True
                self.update_timer()

            self.generate_numbers()
        else:
            self.timer_running = False
            self.update_timer()

            Score = "--"
            self.label_score.configure(text=f"Score {Count}: {Score}")
            self.Hasil = ctk.CTkButton(self.PAGE2, text="Lihat Hasil", font=(self.font, 15), 
                                          corner_radius=15, text_color= "black", fg_color="#FF8000", 
                                          border_color="black", border_width=2.6, command=self.show_page5)
            self.Hasil.pack(side=ctk.RIGHT, anchor=ctk.S, padx=45, pady=45)

            self.full_selesai = True

            self.grafik = tk.Frame(self.PAGE5)
            self.grafik.place(x=180,y=20)

    def reset_game(self):
        self.timer_running = False

        self.label_timer.configure(text="")
        self.entry.delete(0, ctk.END)

    def update_timer(self):
        if self.remaining_time >= 0 and self.timer_running:
            mins, secs = divmod(self.remaining_time, 60)
            timer = '{:02d}:{:02d}'.format(mins, secs)
            self.label_timer.configure(text=timer)
            self.remaining_time -= 1
            self.label_timer.after(1000, self.update_timer)
        
        elif self.timer_running:
            global Score
            global Count
            Storage_Score.append(Score)
            print(Storage_Score)
            
            if self.game_cepat_running:
                Count += 1
                
                self.reset_game()
                self.start_game_cepat()
            
            elif self.game_full_running:
                Count +=1
                
                self.reset_game()
                self.start_game_full()

        else:
            print("selesai")
            self.Selesai()

    def Selesai(self):             
        self.label_timer.configure(text="Waktu Habis!", font=(self.font, 20))
        self.label2.configure(text="Silahkan lihat Hasil!", font=(self.font, 20))
        self.label3.configure(text="")
        self.entry.configure(state= "disabled")
        self.Tombol_submit.configure(state="disabled")
        self.entry.unbind("<Return>")
    
    def Mulai(self):
        self.label_timer.configure(text="", font=(self.font, 40))
        self.label2.configure(text="", font=(self.font, 40))
        self.entry.configure(state= "normal")
        self.Tombol_submit.configure(state="normal")
        self.entry.bind("<Return>", lambda event: self.Pauli())

    def generate_numbers(self):
        if len(Storage_Pauli) != 0:
            Storage_Pauli.pop(0)
            Storage_Pauli.append(random.randint(0, 9))
        else:
            Storage_Pauli.append(random.randint(0, 9))
            Storage_Pauli.append(random.randint(0, 9))

        self.label2.configure(text=Storage_Pauli[0])
        self.label3.configure(text=Storage_Pauli[1])

    def Pauli(self):
        Hasil = sum(Storage_Pauli)

        Masukan = self.entry.get()
        self.entry.delete(0, tk.END)

        modulus_hasil = Hasil % 10

        if Masukan.isdigit() and int(Masukan) == modulus_hasil:       
            global Score
            Score += 1
            self.label_score.configure(text=f"Score {Count}: {Score}")
            print("Jawaban benar")
        else: 
            print("Jawaban salah")
            print(f"Harusnya jawaban anda: {modulus_hasil}")

        self.generate_numbers()

    def Show_Grafik(self):
        x = []
        y = []

        if self.cepat_selesai or self.full_selesai:
            self.Belum_ada_hasil.configure(text="")

            self.grafik_status = True

            if self.cepat_selesai:
                for X_Axis in range(1,6):
                    x.append(X_Axis)
            elif self.full_selesai:
                for X_Axis in range(1,27):
                    x.append(X_Axis)
        
            for data in (Storage_Score):
                y.append(data)

            fig = Figure(figsize=(8, 4), dpi=80)
            ax = fig.add_subplot(111)
            ax.plot(x, y, label="Score", color="blue", marker="o")
            ax.set_title("Hasil Tes Pauli dalam Grafik")
            ax.set_xlabel("Banyaknya Pengulangan")
            ax.set_ylabel("Banyaknya Hasil Benar")
            ax.legend()

            for widget in self.grafik.winfo_children():
                widget.destroy()

            canvas = FigureCanvasTkAgg(fig, master=self.grafik)
            canvas.draw()
            canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)

        else: 
            for widget in self.grafik.winfo_children():
                widget.destroy()
                self.grafik.destroy()

            self.Belum_ada_hasil.configure(text="Maaf, Hasil Tes belum dapat dikeluarkan")
            self.Belum_ada_hasil.place(x=150,y=20)

if __name__ == "__main__":  
    apk = tk.Tk()  
    app = MainApp(apk)
    apk.mainloop()
